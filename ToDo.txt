There 'should' be no bugs or 'clean-ups' before moving to the next 'step'.
The objects can be added at anytime. But be aware there could be changes that will brake objects.

####BUGS####
When removing an object it will disconnect some objects not even connected to it.

####Clean-Ups#### <Means make things orderly and comment things.

Step#1
	
Step#2
	Allow objects to send Requests for new data from a input. (Object1 is connected to Object2 and Object2 wants a update so it asks object1.)
		Don't see a use for it yet.  (It would require other objects to support it.  So it would make making a object harder.)

	Add support for C# plugins
		Im thinking of just having a libary named csPlugins.dll
			That will not work right.  So need a nother idea.  (problem is that the C# library, would need to be linked to vb and vb to c#. Would then create a loop.)


Step#3
	Compile saved config file with plugins. as a single (.exe or .dll)    (with a option to disable all GUI)
		Need a way for the compiler to remove unneeded code from scripts.

	Tooltip regions.  Would allow controls or rectangles. e.g.
		Tooltip.Add(textbox1, "Add some text.") 'Returns index.
		Tooltip.Update(Index#,textbox1, Optional text)
		Tooltip.Remove(Index#)


	Add a check to see if plugins need compiling when Flowgraph.exe is ran.
		Would then give a option to compile plugins.
			If yes then we run compiler wich then waits for flograph to close before compiling.

Step#GUI
	Zoom and movment. (Should just need to put objects in an image or something.)
						That will not work for zooming. (Because of controls.)

	New lines!!!
		Going to make a simple picture to show how it could work.

Step#4
	Folders (Allow you to put objects in folders.)
			Each folder would have one input(As Object) and one output(As Object).




Objects to add:   **There should be atleast one object scripted in C#.** (After step#2 is Done.)
	Math:
		Minus
		Round
		Multiply
		Devide

	Logic:
		Equals	In(Object1,Object2)		Out(Equals as Boolean)
		Numbers:
			Greater Then
			Less Than
			Greater Than or equal to
			Less Than or equal to 

	Misc:
		Get varable from object.
			Need to do some more research/testing on this: 
				Objects(#).GetType.GetField("FieldName")
				Objects(#).GetType.GetProperty("PropertyName")
				



	Input:
		Keyboard:	In(Enabled, Tick)	Out(Keyboard state, Down)
		Mouse:		In(Enabled, Tick)	Out(Position, DownButtons, UpButtons)
		Joystick:	In(Enabled, Tick, Joystick ID) Out(Joystick state)
		InputHandler: In(Input)		Out(InputState, Axis, IsPressed)

	Output:
		


	MIDI:
		GetController
		GetSetNote
		Filter objects
		Debug	Like Pedals debug.
		Input:
			Add a checkbox to 'fix' controller events. (Mainly note On and Off.)

		Keyboard:
			Add a check box to disable other channel colors.

		Some sort of MID player.
