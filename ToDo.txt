There 'should' be no bugs or 'clean-ups', before moving to the next 'step'. or releasing a new version.
The objects can be added at anytime. But be aware there could be changes that will brake objects.

####BUGS####

####Clean-Ups#### <Make things orderly and comment things. (Split up big files, Use regions, Simplify code.)
Make sure Flowgraph can do Everything Pedals can. Then add a note to use Flowgraph on the Pedals page.
BaseObject: Should move DataFlow in to it's own file.
Make sure all numbers load right for different languages. ex: spanish half is 0,5 english half is 0.5

Step#1
	
Step#2
	Allow objects to send Requests for new data from a input. (Object1 is connected to Object2 and Object2 wants a update so it asks object1.)
		Don't see a use for it yet.  (It would require other objects to support it.  So it would make making a object harder.)

	Add support for C# plugins
		I'm thinking of just having a library named csPlugins.dll
			That will not work right.  So need a another idea.  (problem is that the C# library, would need to be linked to vb and vb to c#. Would then create a loop.)


Step#3
	Compile saved config file with plugins. as a single (.exe or .dll)    (with a option to disable all GUI)
		Need a way for the compiler to remove unneeded code from scripts.

	Tooltip regions.  Would allow controls or rectangles. e.g.
		Tooltip.Add(textbox1, "Add some text.") 'Returns index.
		Tooltip.Update(Index#,textbox1, Optional text)
		Tooltip.Remove(Index#)
	
	fgs source. A button that would show a window with the fgs contents and could be chaged.
	

	Add a check to see if plugins need compiling when Flowgraph.exe is ran.
		Would then give a option to compile plugins.
			If yes then we run compiler witch then waits for Flowgraph to close before compiling.
				Not sure if this is a good idea. Because it would make loading Flowgraph slower.

Step#GUI
	Zoom and movement. (Should just need to put objects in an image or something.)
						That will not work for zooming. (Because of controls.)

	New lines!!!
		Need a better way to do colors. And at lest a command line to disable colors.

Step#4
	Folders (Allow you to put objects in folders.)
			Each folder would have one input(As Object) and one output(As Object).




Objects to add:   **There should be at least one object scripted in C#.** (After step#2 is Done.)
	Math:
		Minus
		Round
		Multiply
		Divide

	Logic:
		Equals	In(Object1,Object2)		Out(Equals as Boolean)
		Numbers:
			Greater Then
			Less Than
			Greater Than or equal to
			Less Than or equal to 

	Misc:
		Get variable from object.
			Need to do some more research/testing on this: 
				Objects(#).GetType.GetField("FieldName")
				Objects(#).GetType.GetProperty("PropertyName")
				



	Input:
		Keyboard:	In(Enabled, Tick)	Out(Keyboard state, Down)
		Mouse:		In(Enabled, Tick)	Out(Position, DownButtons, UpButtons)
		Joystick:	In(Enabled, Tick, Joystick ID) Out(Joystick state)
		InputHandler: In(Input)		Out(InputState, Axis, IsPressed)

	Output:
		Really need more then just HID output. (I know currently there is just MIDI.)


	MIDI:
		GetController
		GetSetNote
		Filter objects: In(Enabled,ChannelMessage)	Out(Filtered,Other)
		Debug	Need debugging for other events.
		Input:
			Add a check box to 'fix' controller events. (Mainly note On and Off.)

		Keyboard:
			Add a check box to disable other channel colors.
		
		Equalizer: Allow you to easily set each notes volume, or a group of notes like every 8 notes get a slider.
		More adv get note: GetNoteLowerThen GetNoteHeigherThen GetNoteInbetwen
		Match channels: Try to match channels so you could say turn up the user volume.
		
		Some sort of MIDI file player. (It was included in Sanford's MIDI library, just needs to be added to a object.)
